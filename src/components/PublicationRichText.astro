---
import type { RichText } from "@/lib/interfaces";

interface Props {
  richTexts: RichText[];
  className?: string;
}

const { richTexts, className = "" } = Astro.props;
---

<span class={className}>
  {richTexts.map((richText) => {
    let content = richText.PlainText;
    let classes = [];
    let styles = [];

    // Apply formatting based on annotations
    if (richText.Annotation.Bold) classes.push("font-bold");
    if (richText.Annotation.Italic) classes.push("italic");
    if (richText.Annotation.Underline) classes.push("underline");
    if (richText.Annotation.Strikethrough) classes.push("line-through");
    if (richText.Annotation.Code) classes.push("font-mono bg-gray-100 dark:bg-gray-800 px-1 rounded");

    // Handle color
    if (richText.Annotation.Color && richText.Annotation.Color !== "default") {
      const colorMap = {
        "gray": "text-gray-600 dark:text-gray-400",
        "brown": "text-amber-700 dark:text-amber-300",
        "orange": "text-orange-600 dark:text-orange-400",
        "yellow": "text-yellow-600 dark:text-yellow-400",
        "green": "text-green-600 dark:text-green-400",
        "blue": "text-blue-600 dark:text-blue-400",
        "purple": "text-purple-600 dark:text-purple-400",
        "pink": "text-pink-600 dark:text-pink-400",
        "red": "text-red-600 dark:text-red-400",
      };
      const colorClass = colorMap[richText.Annotation.Color as keyof typeof colorMap];
      if (colorClass) classes.push(colorClass);
    }

    const combinedClass = classes.join(" ");

    // Handle links
    if (richText.Href) {
      return (
        <a 
          href={richText.Href} 
          class={`${combinedClass} hover:underline`}
          target="_blank" 
          rel="noopener noreferrer"
        >
          {content}
        </a>
      );
    } else {
      return <span class={combinedClass}>{content}</span>;
    }
  })}
</span>