---
import * as interfaces from "@/lib/interfaces.ts";
import NotionBlocks from "@/components/NotionBlocks.astro";

export interface Props {
	block: interfaces.Block;
	renderChildren?: boolean; // Make this optional
	setId?: boolean;
}

const { block, renderChildren = true, setId = true } = Astro.props;

// Calculate flex values based on column ratios
const columns = block.ColumnList.Columns;

// Debug all column data
console.log('=== COLUMN DEBUG INFO ===');
console.log('Total columns:', columns.length);
columns.forEach((col, index) => {
	console.log(`Column ${index}:`, {
		id: col.Id,
		ratio: col.ColumnRatio,
		hasChildren: col.HasChildren,
		childrenCount: col.Children?.length || 0
	});
});

// Now use actual Notion ratios since CSS works
const hasValidRatios = columns.some(col => col.ColumnRatio !== undefined && col.ColumnRatio > 0);

const flexValues = hasValidRatios 
	? columns.map(col => {
		const ratio = col.ColumnRatio;
		console.log(`Processing column ratio: ${ratio}`);
		// Convert Notion's 0-1 ratios to flex values
		return ratio && ratio > 0 ? ratio : 0.5; // fallback to equal split
	})
	: columns.map(() => 1); // Equal distribution when no ratios

console.log('Applied flex values:', flexValues);
console.log('========================');
---

<div class="mx-auto my-4 block w-full max-w-full flex-wrap gap-x-4 sm:flex md:flex-nowrap">
	{
		block.ColumnList.Columns.map((column: interfaces.Column, index: number) => (
			<div 
				class="ncolumns min-w-0"
				style={`flex: ${flexValues[index]}; border: 1px dashed rgba(0,0,255,0.3);`}
			>
				<NotionBlocks blocks={column.Children} renderChildren={renderChildren} setId={setId} />
			</div>
		))
	}
</div>
