---
import * as interfaces from "@/lib/interfaces.ts";
import NotionBlocks from "@/components/NotionBlocks.astro";

export interface Props {
	block: interfaces.Block;
	renderChildren?: boolean; // Make this optional
	setId?: boolean;
}

const { block, renderChildren = true, setId = true } = Astro.props;

// Calculate flex values based on column ratios
const columns = block.ColumnList.Columns;
const hasRatios = columns.some(col => col.ColumnRatio !== undefined && col.ColumnRatio > 0);

// Calculate flex values: Notion's column_ratio is between 0-1 and should sum to 1
// Use ratios directly as CSS flex values - they represent proper proportions
const flexValues = columns.map(col => {
	const ratio = col.ColumnRatio;
	if (ratio !== undefined && ratio > 0) {
		// Use ratio directly - CSS flex handles proportional distribution
		return ratio;
	}
	// Default: equal distribution (1/columns.length ensures they sum to 1)
	return 1 / columns.length;
});

// Debug logging (can be removed in production)
if (import.meta.env.DEV && hasRatios) {
	console.log('Column ratios from Notion:', columns.map(col => col.ColumnRatio));
	console.log('Converted flex values:', flexValues);
	console.log('Sum of ratios:', columns.reduce((sum, col) => sum + (col.ColumnRatio || 0), 0));
}
---

<div class="mx-auto my-4 block w-full max-w-full flex-wrap gap-x-4 sm:flex md:flex-nowrap">
	{
		block.ColumnList.Columns.map((column: interfaces.Column, index: number) => (
			<div 
				class="ncolumns w-full max-w-full min-w-0 basis-44 sm:w-44 md:w-auto"
				style={`flex: ${flexValues[index]}`}
			>
				<NotionBlocks blocks={column.Children} renderChildren={renderChildren} setId={setId} />
			</div>
		))
	}
</div>
